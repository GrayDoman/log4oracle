CREATE OR REPLACE PROCEDURE test_job_proc(A VARCHAR2,b VARCHAR2,c VARCHAR2,
m_JOB_NAME VARCHAR2 DEFAULT NULL,
m_JOB_SUBNAME VARCHAR2 DEFAULT NULL,
m_JOB_OWNER VARCHAR2 DEFAULT NULL,
m_JOB_START TIMESTAMP WITH TIME ZONE DEFAULT NULL,
m_WINDOW_START TIMESTAMP WITH TIME ZONE DEFAULT NULL,
m_WINDOW_END TIMESTAMP WITH TIME ZONE DEFAULT NULL,
m_SCHEDULED_JOB_START TIMESTAMP WITH TIME ZONE DEFAULT NULL,
--m_EVENT_MESSAGE VARCHAR2 DEFAULT NULL, --needs to be type of message queue
m_LOG_ID NUMBER DEFAULT NULL,
m_CHAIN_ID NUMBER DEFAULT NULL,
m_JOB_DEST_ID NUMBER DEFAULT NULL,
m_CREDENTIAL_NAME VARCHAR2 DEFAULT NULL,
m_CREDENTIAL_OWNER VARCHAR2 DEFAULT NULL,
m_DESTINATION_NAME VARCHAR2 DEFAULT NULL,
m_DESTINATION_OWNER VARCHAR2 DEFAULT NULL
)

IS
  l log4.logger := log4.logmanager.getlogger();
BEGIN
l.entry();

l.DEBUG('a='||A||' b='||b||' c='||c);

l.DEBUG('m_JOB_NAME=' || m_JOB_NAME);
l.DEBUG('m_JOB_SUBNAME=' || m_JOB_SUBNAME);
l.DEBUG('m_JOB_OWNER=' || m_JOB_OWNER);
l.DEBUG('m_JOB_START=' || m_JOB_START);
l.DEBUG('m_WINDOW_START=' || m_WINDOW_START);
l.DEBUG('m_WINDOW_END=' || m_WINDOW_END);
 
--l.DEBUG('m_EVENT_MESSAGE=' || m_EVENT_MESSAGE);

 
--non standard
l.DEBUG('m_SCHEDULED_JOB_START=' || m_SCHEDULED_JOB_START);

l.DEBUG('m_LOG_ID=' || m_LOG_ID);
l.DEBUG('m_CHAIN_ID=' || m_CHAIN_ID);
l.DEBUG('m_JOB_DEST_ID=' || m_JOB_DEST_ID);
l.DEBUG('m_CREDENTIAL_NAME=' || m_CREDENTIAL_NAME);
l.DEBUG('m_CREDENTIAL_OWNER=' || m_CREDENTIAL_OWNER);
l.DEBUG('m_DESTINATION_NAME=' || m_DESTINATION_NAME);
l.DEBUG('m_DESTINATION_OWNER=' || m_DESTINATION_OWNER);
 
 

l.exit();

END;
/

BEGIN
    DBMS_SCHEDULER.create_program(
        program_name => 'SYSTEM."test_prog2"',
        program_action => 'SYSTEM.TEST_JOB_PROC',
        program_type => 'STORED_PROCEDURE',
        number_of_arguments => 18,
        comments => NULL,
        enabled => FALSE);
        
   DBMS_SCHEDULER.define_program_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'A',
        argument_position => 1,
        argument_type => 'VARCHAR2',
        default_value => '4',
        out_argument => FALSE);
    DBMS_SCHEDULER.define_program_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'B',
        argument_position => 2,
        argument_type => 'VARCHAR2',
        default_value => '5',
        out_argument => FALSE);
    DBMS_SCHEDULER.define_program_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'C',
        argument_position => 3,
        argument_type => 'VARCHAR2',
        default_value => '6',
        out_argument => FALSE);
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_JOB_NAME',
        argument_position => 4,
        metadata_attribute => 'JOB_NAME');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_JOB_SUBNAME',
        argument_position => 5,
        metadata_attribute => 'JOB_SUBNAME');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_JOB_OWNER',
        argument_position => 6,
        metadata_attribute => 'JOB_OWNER');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_JOB_START',
        argument_position => 7,
        metadata_attribute => 'JOB_START');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_WINDOW_START',
        argument_position => 8,
        metadata_attribute => 'WINDOW_START');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_WINDOW_END',
        argument_position => 9,
        metadata_attribute => 'WINDOW_END');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_SCHEDULED_JOB_START',
        argument_position => 10,
        metadata_attribute => 'JOB_SCHEDULED_START');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_LOG_ID',
        argument_position => 11,
        metadata_attribute => 'LOG_ID');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_CHAIN_ID',
        argument_position => 12,
        metadata_attribute => 'CHAIN_ID');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_JOB_DEST_ID',
        argument_position => 13,
        metadata_attribute => 'JOB_DEST_ID');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_CREDENTIAL_NAME',
        argument_position => 14,
        metadata_attribute => 'CREDENTIAL_NAME');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_CREDENTIAL_OWNER',
        argument_position => 15,
        metadata_attribute => 'CREDENTIAL_OWNER');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_DESTINATION_NAME',
        argument_position => 16,
        metadata_attribute => 'DESTINATION_NAME');
    DBMS_SCHEDULER.define_metadata_argument(
        program_name => 'SYSTEM."test_prog2"',
        argument_name => 'M_DESTINATION_OWNER',
        argument_position => 17,
        metadata_attribute => 'DESTINATION_OWNER');
  

    DBMS_SCHEDULER.ENABLE(name=>'SYSTEM."test_prog2"');    
END;